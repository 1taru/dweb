const express = require('express');
const exphbs = require('express-handlebars');
const jwt = require('jsonwebtoken');
const uuid = require('uuid');
const path = require('path');
const app = express();

// Generar un identificador único para cada sesión
const sessionId = uuid.v4();

// Luego, al generar el token, incluye el sessionId en el payload
const token = generarToken({ id: '1234', sessionId: sessionId });

// Configuración de Handlebars como el motor de plantillas predeterminado
const handlebars = exphbs.create({
    extname: '.hbs' // Especifica la extensión de archivo como .hbs
  });
app.set('view engine', '.hbs');
app.engine('.hbs', handlebars.engine);
app.set('views', path.join(__dirname, 'views'));
// Middleware para analizar el cuerpo de las solicitudes
app.use(express.urlencoded({ extended: false }));

// Ruta GET para mostrar el formulario de inicio de sesión
app.get('/p1_v2', (req, res) => {
  res.render('login');
});

// Ruta POST para procesar el inicio de sesión
app.post('/p1_v2', (req, res) => {
  const { username, password } = req.body;

  // Realizar la verificación del usuario en la base de datos
  if (verificarCredenciales(username, password)) {
    // Obtener los datos del usuario autenticado desde la base de datos o cualquier otra fuente
    const userId = obtenerUserId(username);
    const email = obtenerEmail(username);

    // Generar un token de sesión con información personal del usuario
    const sessionId = uuid.v4();
    const token = generarToken({ userId, email, sessionId });

    // Redirigir al usuario a la página principal con el token en la URL
    res.redirect(`/home?token=${token}`);
  } else {
    // Las credenciales son inválidas, redirigir al formulario de inicio de sesión con un mensaje de error
    res.redirect('/p1_v2?error=invalid_credentials');
  }
});

// Ruta GET para la página principal
app.get('/home', (req, res) => {
  // Verificar el token de sesión en la URL
  const token = req.query.token;
  try {
    const decoded = jwt.verify(token, 'secreto');
    // El token es válido, puedes acceder a los datos del usuario
    const userId = decoded.userId;
    const email = decoded.email;

    // Renderizar la página principal con los datos del usuario
    res.render('home', { userId, email });
  } catch (error) {
    // El token es inválido o ha expirado, redirigir al formulario de inicio de sesión con un mensaje de error
    res.redirect('/p1_v2?error=invalid_token');
  }
});

// Función para verificar las credenciales del usuario en la base de datos


// Función para obtener el ID del usuario desde la base de datos
function obtenerUserId(username) {
  // Aquí debes implementar la lógica para obtener el ID del usuario desde tu base de datos
  // Retorna el ID del usuario correspondiente al username proporcionado
  // En este ejemplo, siempre retornamos '1234' como ID
  return '1234';
}

// Función para obtener el email del usuario desde la base de datos
function obtenerEmail(username) {
    // Aquí debes implementar la lógica para obtener el email del usuario desde tu base de datos
    // Retorna el email del usuario correspondiente al username proporcionado
    // En este ejemplo, siempre retornamos 'example@example.com' como email
    return 'example@example.com';
  }
  
  function verificarCredenciales(username, password) {
    // Realizar la verificación de las credenciales del usuario en la base de datos
    // Por ejemplo, buscar el usuario por nombre de usuario y verificar la contraseña
    return User.findOne({ username, password })
      .then(user => {
        // Si el usuario existe y las credenciales son válidas, devuelve true
        if (user) {
          return true;
        }
        // Si las credenciales son inválidas o el usuario no existe, devuelve false
        return false;
      })
      .catch(error => {
        console.error('Error al verificar las credenciales:', error);
        return false;
      });
  }
  module.exports = {
    verificarCredenciales
  };
  // Función para generar un token JWT único para cada inicio de sesión
  function generarToken(usuario) {
    const payload = {
      userId: usuario.userId,
      email: usuario.email,
      sessionId: usuario.sessionId,
      // Otros datos adicionales que desees incluir en el token
    };
  
    const token = jwt.sign(payload, 'secreto', { expiresIn: '1h' });
  
    return token;
  }
  
